Pourquoi est-ce qu'il faut déclarer les useLights sur les derniers mesh créés plutôt qu'une fois au début ?

 - Importer plusieurs objets d'un même .obj
 - Faire passer les .h en .hpp
 - Calculer la matrice normale en dehors phong vert
 - Séparer la partie création de la fenetre et initialisation d'OpenGL de la classe Scene
 - Ajouter des objets à la Scene plus facilement

 - Framebuffer
 - Cubemap
 - AA
 - Instancing

// --- SCREEN ---
_Screen.hpp_

class Screen {
	public: 
		static unsigned int width;
		static unsigned int height;

		Scene(int, int);
		~Scene();

}

_Screen.cpp_

Screen::Screen(int width, height) : width(width), height(height){}

Screen::~Screen(){}
// --- SCREEN ---

// --- Context ---
_Context.hpp_

class Context {
	public:
        Context();
        ~Context();

        bool CreateWindowAndContext(unsigned int, unsigned int);

	private:
		SDL_Window* window;
        SDL_GLContext context;
        Input input;
}

_Context.cpp_

Context::Context() : window(0), context(0), input(){}

Context::~Context(){
    SDL_GL_DeleteContext(context);
    SDL_DestroyWindow(window);
    SDL_Quit();
}

bool Context::CreateWindowAndContext(unsigned int width, unsigned int height){
	Screen.width = width;
	Screen.height = height;

    // Initialisation de la SDL
    if(SDL_Init(SDL_INIT_VIDEO) < 0){
        std::cout << "Erreur lors de l'initialisation de la SDL : " << SDL_GetError() << std::endl;
        SDL_Quit();

        return false;
    }

    // Version d'OpenGL
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);

    // Double Buffer
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);

    window = SDL_CreateWindow("REKTgine", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width, height, SDL_WINDOW_SHOWN | SDL_WINDOW_OPENGL);

    if(window == 0){
        std::cout << "Erreur lors de la creation de la fenetre : " << SDL_GetError() << std::endl;
        SDL_Quit();

        return false;
    }

    context = SDL_GL_CreateContext(window);

    if(context == 0){
        std::cout << SDL_GetError() << std::endl;
        SDL_DestroyWindow(window);
        SDL_Quit();

        return false;
    }

    GLenum err = glewInit();
    if(err != GLEW_OK){
        std::cout << "Erreur d'initialisation de GLEW : " << glewGetErrorString(err);
        SDL_GL_DeleteContext(context);
        SDL_DestroyWindow(window);
        SDL_Quit();

        return false;
    }

    return true;
}

// --- Context ---


